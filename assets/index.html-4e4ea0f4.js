import{_ as r,M as s,p as l,q as d,R as e,t as i,N as n,a1 as a}from"./framework-96b046e1.js";const c={},o=a(`<h2 id="常用工具知识总结" tabindex="-1"><a class="header-anchor" href="#常用工具知识总结" aria-hidden="true">#</a> 常用工具知识总结</h2><h3 id="目录" tabindex="-1"><a class="header-anchor" href="#目录" aria-hidden="true">#</a> 目录</h3><ul><li><a href="#git">GIT</a><ul><li><a href="#1-git-%E4%B8%8E-svn-%E7%9A%84%E5%8C%BA%E5%88%AB%E5%9C%A8%E5%93%AA%E9%87%8C">1. git 与 svn 的区别在哪里？</a></li><li><a href="#2-%E7%BB%8F%E5%B8%B8%E4%BD%BF%E7%94%A8%E7%9A%84-git-%E5%91%BD%E4%BB%A4">2. 经常使用的 git 命令？</a></li><li><a href="#3-git-pull-%E5%92%8C-git-fetch-%E7%9A%84%E5%8C%BA%E5%88%AB">3. git pull 和 git fetch 的区别</a></li><li><a href="#4-git-rebase-%E5%92%8C-git-merge-%E7%9A%84%E5%8C%BA%E5%88%AB">4. git rebase 和 git merge 的区别</a></li></ul></li></ul><h3 id="git" tabindex="-1"><a class="header-anchor" href="#git" aria-hidden="true">#</a> GIT</h3><h4 id="_1-git-与-svn-的区别在哪里" tabindex="-1"><a class="header-anchor" href="#_1-git-与-svn-的区别在哪里" aria-hidden="true">#</a> 1. git 与 svn 的区别在哪里？</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git 和 svn 最大的区别在于 git 是分布式的，而 svn 是集中式的。因此我们不能再离线的情况下使用 svn。如果服务器
出现问题，我们就没有办法使用 svn 来提交我们的代码。

svn 中的分支是整个版本库的复制的一份完整目录，而 git 的分支是指针指向某次提交，因此 git 的分支创建更加开销更小
并且分支上的变化不会影响到其他人。svn 的分支变化会影响到所有的人。

svn 的指令相对于 git 来说要简单一些，比 git 更容易上手。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),g={href:"https://github.com/geeeeeeeeek/git-recipes/wiki/3.5-%E5%B8%B8%E8%A7%81%E5%B7%A5%E4%BD%9C%E6%B5%81%E6%AF%94%E8%BE%83",target:"_blank",rel:"noopener noreferrer"},h={href:"https://juejin.im/post/5bd95bf4f265da392c5307eb",target:"_blank",rel:"noopener noreferrer"},m={href:"https://blog.csdn.net/github_33304260/article/details/80171456",target:"_blank",rel:"noopener noreferrer"},u={href:"https://www.jianshu.com/p/e8ad60710017",target:"_blank",rel:"noopener noreferrer"},v=a(`<h4 id="_2-经常使用的-git-命令" tabindex="-1"><a class="header-anchor" href="#_2-经常使用的-git-命令" aria-hidden="true">#</a> 2. 经常使用的 git 命令？</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git init                     // 新建 git 代码库
git add                      // 添加指定文件到暂存区
git rm                       // 删除工作区文件，并且将这次删除放入暂存区
git commit -m [message]      // 提交暂存区到仓库区
git branch                   // 列出所有分支
git checkout -b [branch]     // 新建一个分支，并切换到该分支
git status                   // 显示有变更的文件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),b={href:"http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html",target:"_blank",rel:"noopener noreferrer"},_=a(`<h4 id="_3-git-pull-和-git-fetch-的区别" tabindex="-1"><a class="header-anchor" href="#_3-git-pull-和-git-fetch-的区别" aria-hidden="true">#</a> 3. git pull 和 git fetch 的区别</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git fetch 只是将远程仓库的变化下载下来，并没有和本地分支合并。

git pull 会将远程仓库的变化下载下来，并和当前分支合并。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),f={href:"https://blog.csdn.net/weixin_41975655/article/details/82887273",target:"_blank",rel:"noopener noreferrer"},p=a(`<h4 id="_4-git-rebase-和-git-merge-的区别" tabindex="-1"><a class="header-anchor" href="#_4-git-rebase-和-git-merge-的区别" aria-hidden="true">#</a> 4. git rebase 和 git merge 的区别</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git merge 和 git rebase 都是用于分支合并，关键在 commit 记录的处理上不同。

git merge 会新建一个新的 commit 对象，然后两个分支以前的 commit 记录都指向这个新 commit 记录。这种方法会
保留之前每个分支的 commit 历史。

git rebase 会先找到两个分支的第一个共同的 commit 祖先记录，然后将提取当前分支这之后的所有 commit 记录，然后
将这个 commit 记录添加到目标分支的最新提交后面。经过这个合并后，两个分支合并后的 commit 记录就变为了线性的记
录了。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),E={href:"https://www.jianshu.com/p/f23f72251abc",target:"_blank",rel:"noopener noreferrer"},x={href:"https://blog.csdn.net/liuxiaoheng1992/article/details/79108233",target:"_blank",rel:"noopener noreferrer"};function B(A,k){const t=s("ExternalLinkIcon");return l(),d("div",null,[o,e("p",null,[i("详细资料可以参考： "),e("a",g,[i("《常见工作流比较》"),n(t)]),e("a",h,[i("《对比 Git 与 SVN，这篇讲的很易懂》"),n(t)]),e("a",m,[i("《GIT 与 SVN 世纪大战》"),n(t)]),e("a",u,[i("《Git 学习小记之分支原理》"),n(t)])]),v,e("p",null,[i("详细资料可以参考： "),e("a",b,[i("《常用 Git 命令清单》"),n(t)])]),_,e("p",null,[e("a",f,[i("《详解 git pull 和 git fetch 的区别》"),n(t)])]),p,e("p",null,[e("a",E,[i("《git rebase 和 git merge 的区别》"),n(t)]),e("a",x,[i("《git merge 与 git rebase 的区别》"),n(t)])])])}const C=r(c,[["render",B],["__file","index.html.vue"]]);export{C as default};
